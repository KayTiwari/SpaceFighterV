{"ast":null,"code":"import _classCallCheck from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/src/Canvas.js\";\nimport React, { Component } from 'react';\nimport TitleScreen from './ReactComponents/TitleScreen';\nimport InputManager from './InputManager';\nimport Ship from './GameComponents/Ship';\nimport Invader from './GameComponents/Invader';\nimport { checkCollisionsFor } from './Helper';\nimport GameOverScreen from './ReactComponents/GameOverScreen';\nvar width = 800;\nvar height = window.innerHeight;\nvar ratio = window.devicePixelRatio || 1;\nvar GameState = {\n  StartScreen: 0,\n  Playing: 1,\n  GameOver: 2\n};\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Canvas, _Component);\n\n  function Canvas() {\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Canvas).call(this));\n\n    _this.clearBackground = function () {\n      var context = _this.state.context;\n      context.save();\n      context.scale(_this.state.screen.ratio, _this.state.screen.ratio);\n      context.fillRect(0, 0, _this.state.screen.width, _this.state.screen.height);\n      context.globalAlpha = 1;\n    };\n\n    _this.die = function () {\n      _this.setState({\n        gameState: GameState.GameOver\n      });\n\n      _this.ship = null;\n      _this.invaders = [];\n      _this.lastStateChange = Date.now();\n    };\n\n    _this.startGame = function () {\n      var ship = new Ship({\n        radius: 15,\n        speed: 2.5,\n        onDie: _this.die.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        position: {\n          x: _this.state.screen.width / 2,\n          y: _this.state.screen.height - 50\n        }\n      });\n      _this.ship = ship;\n\n      _this.createInvaders(9);\n\n      _this.setState({\n        gameState: GameState.Playing,\n        score: 0\n      });\n    };\n\n    _this.state = {\n      input: new InputManager(),\n      screen: {\n        width: width,\n        height: height,\n        ratio: window.devicePixelRatio\n      },\n      gameState: GameState.StartScreen,\n      previousState: GameState.StartScreen,\n      context: null,\n      score: 0\n    };\n    _this.ship = null;\n    _this.invaders = [];\n    _this.lastStateChange = 0;\n    _this.previousDelta = 0;\n    _this.fpsLimit = 30;\n    _this.showControls = false;\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.state.input.bindKeys();\n      window.addEventListener('resize', this.handleResize.bind(this, false));\n      var context = this.refs.canvas.getContext('2d');\n      this.setState({\n        context: context\n      });\n      requestAnimationFrame(function () {\n        _this2.update();\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.state.input.unbindKeys();\n    }\n  }, {\n    key: \"handleResize\",\n    value: function handleResize(value, e) {\n      this.setState({\n        screen: {\n          width: width,\n          height: height,\n          ratio: window.devicePixelRatio || 1\n        }\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(currentDelta) {\n      var _this3 = this;\n\n      var keys = this.state.input.pressedKeys;\n\n      if (this.state.gameState === GameState.StartScreen && keys.enter) {\n        this.startGame();\n      }\n\n      if (this.state.gameState === GameState.Playing) {\n        this.clearBackground();\n\n        if (this.ship !== undefined && this.ship !== null) {\n          this.ship.update(keys);\n          this.ship.render(this.state);\n          this.renderInvaders(this.state);\n        }\n\n        checkCollisionsFor(this.ship.bullets, this.invaders);\n        checkCollisionsFor([this.ship], this.invaders);\n\n        for (var i = 0; i < this.invaders.length; i++) {\n          checkCollisionsFor(this.invaders[i].bullets, [this.ship]);\n        }\n\n        if (this.invaders.length === 0) {\n          for (var k = 1; k < 5; k++) {\n            this.createInvaders(9 * k);\n            this.setState(function (prevState) {\n              return {\n                score: prevState.score + 100 * k\n              };\n            });\n          }\n        }\n      }\n\n      if (this.state.gameState === GameState.GameOver && keys.enter) {\n        this.setState({\n          gameState: GameState.StartScreen\n        });\n      }\n\n      if (this.state.gameState === GameState.GameOver && keys.S) {\n        if (localStorage.token) {\n          alert('hi');\n        } else {\n          alert('You need to be logged in to use that feature');\n          this.setState({\n            gameState: GameState.StartScreen\n          });\n        }\n      }\n\n      requestAnimationFrame(function () {\n        _this3.update();\n      });\n    }\n  }, {\n    key: \"increaseScore\",\n    value: function increaseScore() {\n      this.setState(function (prevState) {\n        return {\n          score: prevState.score + 10\n        };\n      });\n    }\n  }, {\n    key: \"createInvaders\",\n    value: function createInvaders(count) {\n      var newPosition = {\n        x: 100,\n        y: 20\n      };\n      var swapStartX = true;\n\n      for (var i = 0; i < count; i++) {\n        var invader = new Invader({\n          position: {\n            x: newPosition.x,\n            y: newPosition.y\n          },\n          speed: 1,\n          onDie: this.increaseScore.bind(this, false),\n          radius: 50\n        });\n        newPosition.x += invader.radius + 20;\n\n        if (newPosition.x + invader.radius + 50 >= this.state.screen.width) {\n          newPosition.x = swapStartX ? 110 : 100;\n          swapStartX = !swapStartX;\n          newPosition.y += invader.radius + 20;\n        }\n\n        this.invaders.push(invader);\n      }\n    }\n  }, {\n    key: \"renderInvaders\",\n    value: function renderInvaders(state) {\n      var index = 0;\n      var reverse = false;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.invaders[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var invader = _step.value;\n\n          if (invader.delete) {\n            this.invaders.splice(index, 1);\n          } else if (invader.position.x + invader.radius >= this.state.screen.width || invader.position.x - invader.radius <= 0) {\n            reverse = true;\n          } else if (invader.position.y >= this.state.screen.height) {\n            this.die();\n          } else {\n            this.invaders[index].update();\n            this.invaders[index].render(state);\n          }\n\n          index++;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (reverse) {\n        this.reverseInvaders();\n      }\n    }\n  }, {\n    key: \"reverseInvaders\",\n    value: function reverseInvaders() {\n      var index = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.invaders[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var invader = _step2.value;\n          this.invaders[index].reverse();\n          this.invaders[index].position.y += 50;\n          index++;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, this.state.gameState === GameState.StartScreen && React.createElement(TitleScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), this.state.gameState === GameState.GameOver && React.createElement(GameOverScreen, {\n        score: this.state.score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        ref: \"canvas\",\n        id: \"canvas\",\n        width: this.state.screen.width * this.state.screen.ratio,\n        height: this.state.screen.height * this.state.screen.ratio,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Canvas;\n}(Component);\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/abhiktiwari/dev/assignments/projects/invisi/client/src/Canvas.js"],"names":["React","Component","TitleScreen","InputManager","Ship","Invader","checkCollisionsFor","GameOverScreen","width","height","window","innerHeight","ratio","devicePixelRatio","GameState","StartScreen","Playing","GameOver","Canvas","clearBackground","context","state","save","scale","screen","fillRect","globalAlpha","die","setState","gameState","ship","invaders","lastStateChange","Date","now","startGame","radius","speed","onDie","bind","position","x","y","createInvaders","score","input","previousState","previousDelta","fpsLimit","showControls","bindKeys","addEventListener","handleResize","refs","canvas","getContext","requestAnimationFrame","update","unbindKeys","value","e","currentDelta","keys","pressedKeys","enter","undefined","render","renderInvaders","bullets","i","length","k","prevState","S","localStorage","token","alert","count","newPosition","swapStartX","invader","increaseScore","push","index","reverse","delete","splice","reverseInvaders"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport TitleScreen from './ReactComponents/TitleScreen'\nimport InputManager from './InputManager';\nimport Ship from './GameComponents/Ship';\nimport Invader from './GameComponents/Invader';\nimport { checkCollisionsFor } from './Helper';\nimport GameOverScreen from './ReactComponents/GameOverScreen';\n\nconst width = 800;\nconst height = window.innerHeight;\nconst ratio = window.devicePixelRatio || 1\nconst GameState = {\n    StartScreen: 0,\n    Playing: 1,\n    GameOver: 2\n}\n\nclass Canvas extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            input: new InputManager(),\n            screen: {\n                width: width,\n                height: height,\n                ratio: window.devicePixelRatio\n            },\n            gameState: GameState.StartScreen,\n            previousState: GameState.StartScreen,\n            context: null,\n            score: 0\n        }\n        this.ship = null;\n        this.invaders = [];\n        this.lastStateChange = 0;\n        this.previousDelta = 0;\n        this.fpsLimit = 30;\n        this.showControls = false;\n    }\n\n    componentDidMount(){\n        this.state.input.bindKeys();\n        window.addEventListener('resize', this.handleResize.bind(this, false))\n        const context = this.refs.canvas.getContext('2d');\n        this.setState({\n            context: context\n        });\n        requestAnimationFrame(() => {this.update()});\n    }\n\n    componentWillMount(){\n        this.state.input.unbindKeys();\n    }\n\n    handleResize(value, e){\n        this.setState({\n          screen : {\n            width: width,\n            height: height,\n            ratio: window.devicePixelRatio || 1,\n          }\n        });\n      }  \n\n    update(currentDelta) {\n        const keys = this.state.input.pressedKeys;\n        if (this.state.gameState === GameState.StartScreen && keys.enter){\n            this.startGame();\n        }\n        if (this.state.gameState === GameState.Playing) {\n            this.clearBackground();\n            if (this.ship !== undefined && this.ship !== null) {\n                this.ship.update(keys);\n                this.ship.render(this.state);\n                this.renderInvaders(this.state);\n            }\n            checkCollisionsFor(this.ship.bullets, this.invaders);\n            checkCollisionsFor([this.ship], this.invaders);\n            for (var i = 0; i < this.invaders.length; i++){\n                checkCollisionsFor(this.invaders[i].bullets, [this.ship]);\n            }\n            if (this.invaders.length === 0) {\n                for (var k = 1; k < 5; k++) {\n                this.createInvaders(9 * k);\n                this.setState(prevState => ({\n                    score: prevState.score + 100*k\n                }))\n                }\n            }\n        }\n        if (this.state.gameState === GameState.GameOver && keys.enter) {\n            this.setState({\n                gameState: GameState.StartScreen\n            })\n        }\n        if (this.state.gameState === GameState.GameOver && keys.S) {\n            if (localStorage.token) {\n                alert('hi')\n            } else {\n                alert('You need to be logged in to use that feature')\n                this.setState({\n                    gameState: GameState.StartScreen\n                })\n            }\n        }\n        requestAnimationFrame(() => {this.update()});\n    }\n    clearBackground = () => {\n        const context = this.state.context;\n        context.save();\n        context.scale(this.state.screen.ratio, this.state.screen.ratio);\n        context.fillRect(0, 0, this.state.screen.width, this.state.screen.height);\n        context.globalAlpha = 1;\n    }\n    die = () => {\n        this.setState({\n            gameState: GameState.GameOver\n        })\n        this.ship = null;\n        this.invaders = [];\n        this.lastStateChange = Date.now();\n    }\n    \n    startGame = () => {\n        let ship = new Ship({\n            radius: 15,\n            speed: 2.5,\n            onDie: this.die.bind(this),\n            position: {\n                x: this.state.screen.width/2,\n                y: this.state.screen.height - 50\n            }})\n        this.ship = ship; \n        this.createInvaders(9);\n        this.setState({\n            gameState: GameState.Playing,\n            score: 0\n        });\n    }\n    increaseScore() {\n        this.setState(prevState => ({\n            score: prevState.score + 10\n        }))\n    }\n\n    createInvaders(count) {\n        const newPosition = {x: 100, y: 20};\n        let swapStartX = true;\n\n        for (var i = 0; i < count; i++) {\n            const invader = new Invader ({\n                position: {x: newPosition.x, y: newPosition.y},\n                speed: 1,\n                onDie: this.increaseScore.bind(this, false),\n                radius: 50\n            });\n            newPosition.x += invader.radius + 20;\n\n            if (newPosition.x + invader.radius + 50 >= this.state.screen.width) {\n                newPosition.x = swapStartX ? 110 : 100;\n                swapStartX = !swapStartX;\n                newPosition.y += invader.radius + 20;\n            }\n            this.invaders.push(invader);\n        }\n    }\n    renderInvaders(state) {\n        let index = 0;\n        let reverse = false;\n\n        for (let invader of this.invaders) {\n            if (invader.delete) {\n                this.invaders.splice(index, 1);\n            }\n            else if (invader.position.x + invader.radius >= this.state.screen.width || invader.position.x - invader.radius <= 0) {\n                reverse = true;\n            } else if (invader.position.y >= this.state.screen.height) {\n                this.die();\n            } \n            else {\n                this.invaders[index].update();\n                this.invaders[index].render(state)\n            }\n            index++;\n        }\n        if (reverse) {\n            this.reverseInvaders();\n        }\n    }\n    reverseInvaders() {\n        let index = 0;\n        for (let invader of this.invaders) {\n            this.invaders[index].reverse();\n            this.invaders[index].position.y += 50;\n            index++;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.gameState === GameState.StartScreen && <TitleScreen />}\n                {this.state.gameState === GameState.GameOver && <GameOverScreen score={this.state.score}/>}\n                <canvas ref=\"canvas\" id='canvas' width={this.state.screen.width * this.state.screen.ratio}\n            height={this.state.screen.height * this.state.screen.ratio}/>\n            </div>\n        );\n    }\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}