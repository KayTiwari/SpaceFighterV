{"ast":null,"code":"import _classCallCheck from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/abhiktiwari/dev/assignments/projects/invisi/client/src/Canvas.js\";\nimport React, { Component } from 'react';\nimport TitleScreen from './ReactComponents/TitleScreen';\nimport InputManager from './InputManager';\nvar width = 800;\nvar height = window.innerHeight;\nvar ratio = window.devicePixelRatio || 1;\nvar GameState = {\n  StartScreen: 0,\n  Playing: 1,\n  GameOver: 2\n};\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Canvas, _Component);\n\n  function Canvas() {\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Canvas).call(this));\n\n    _this.startGame = function () {\n      _this.setState({\n        gameState: GameState.Playing\n      });\n    };\n\n    _this.state = {\n      input: new InputManager(),\n      screen: {\n        width: width,\n        height: height,\n        ratio: window.devicePixelRatio\n      },\n      score: 0,\n      gameState: GameState.StartScreen,\n      previousState: GameState.StartScreen,\n      context: null\n    };\n    _this.ship = null;\n    _this.invaders = [];\n    _this.lastStateChange = 0;\n    _this.previousDelta = 0;\n    _this.fpsLimit = 30;\n    _this.showControls = false;\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.state.input.bindKeys();\n      var context = this.refs.canvas.getContext('2d');\n      this.setState({\n        context: context\n      });\n      requestAnimationFrame(function () {\n        _this2.update();\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.state.input.unbindKeys();\n    }\n  }, {\n    key: \"update\",\n    value: function update(currentDelta) {\n      var _this3 = this;\n\n      var keys = this.state.input.pressedKeys;\n\n      if (this.state.gameState === GameState.StartScreen && keys.enter) {\n        this.startGame();\n      }\n\n      requestAnimationFrame(function () {\n        _this3.update();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.state.gameState === GameState.StartScreen && React.createElement(TitleScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        ref: \"canvas\",\n        id: \"canvas\",\n        width: this.state.screen.width * this.state.screen.ratio,\n        height: this.state.screen.height * this.state.screen.ratio,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Canvas;\n}(Component);\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/abhiktiwari/dev/assignments/projects/invisi/client/src/Canvas.js"],"names":["React","Component","TitleScreen","InputManager","width","height","window","innerHeight","ratio","devicePixelRatio","GameState","StartScreen","Playing","GameOver","Canvas","startGame","setState","gameState","state","input","screen","score","previousState","context","ship","invaders","lastStateChange","previousDelta","fpsLimit","showControls","bindKeys","refs","canvas","getContext","requestAnimationFrame","update","unbindKeys","currentDelta","keys","pressedKeys","enter"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport TitleScreen from './ReactComponents/TitleScreen'\nimport InputManager from './InputManager';\n\nconst width = 800;\nconst height = window.innerHeight;\nconst ratio = window.devicePixelRatio || 1\nconst GameState = {\n    StartScreen: 0,\n    Playing: 1,\n    GameOver: 2\n}\n\nclass Canvas extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            input: new InputManager(),\n            screen: {\n                width: width,\n                height: height,\n                ratio: window.devicePixelRatio\n            },\n            score: 0,\n            gameState: GameState.StartScreen,\n            previousState: GameState.StartScreen,\n            context: null\n        }\n        this.ship = null;\n        this.invaders = [];\n        this.lastStateChange = 0;\n        this.previousDelta = 0;\n        this.fpsLimit = 30;\n        this.showControls = false;\n    }\n\n    componentDidMount(){\n        this.state.input.bindKeys();\n        const context = this.refs.canvas.getContext('2d');\n        this.setState({\n            context: context\n        });\n        requestAnimationFrame(() => {this.update()});\n    }\n\n    componentWillMount(){\n        this.state.input.unbindKeys();\n    }\n\n    update(currentDelta) {\n        const keys = this.state.input.pressedKeys;\n        if (this.state.gameState === GameState.StartScreen && keys.enter){\n            this.startGame();\n        }\n        requestAnimationFrame(() => {this.update()});\n    }\n    \n    \n    \n    startGame = () => {\n        this.setState({\n            gameState: GameState.Playing\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.gameState === GameState.StartScreen && <TitleScreen />}\n                <canvas ref=\"canvas\" id='canvas' width={this.state.screen.width * this.state.screen.ratio}\n            height={this.state.screen.height * this.state.screen.ratio}/>\n            </div>\n        );\n    }\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}